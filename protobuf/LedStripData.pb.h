/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_LEDSTRIPDATA_PB_H_INCLUDED
#define PB_LEDSTRIPDATA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _BJT { 
    uint32_t partNumber; 
    uint32_t package; 
    uint32_t structure; 
    uint32_t vColEmiMax; 
    uint32_t colCurMax; 
    uint32_t power; 
    uint32_t amount; 
} BJT;

typedef struct _Capacitor { 
    uint32_t partNumber; 
    uint32_t package; 
    uint32_t capacitance; 
    uint32_t tolerance; 
    uint32_t nullPlug; 
    uint32_t maxVoltage; 
    uint32_t amount; 
} Capacitor;

typedef struct _Item { 
    uint32_t type; 
} Item;

typedef struct _Resistor { 
    uint32_t partNumber; 
    uint32_t package; 
    uint32_t resistance; 
    uint32_t tolerance; 
    uint32_t power; 
    uint32_t maxVoltage; 
    uint32_t amount; 
} Resistor;

typedef struct _Respond { 
    uint32_t code; 
} Respond;

typedef struct _RgbData { 
    uint32_t red; 
    uint32_t green; 
    uint32_t blue; 
} RgbData;

typedef struct _LedStripData { 
    uint32_t boardNumber; 
    uint32_t stripNumber; 
    uint32_t startLedNumber; 
    uint32_t endLedNumber; 
    bool has_Colour;
    RgbData Colour; 
} LedStripData;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define LedStripData_init_default                {0, 0, 0, 0, false, RgbData_init_default}
#define RgbData_init_default                     {0, 0, 0}
#define Respond_init_default                     {0}
#define Item_init_default                        {0}
#define Resistor_init_default                    {0, 0, 0, 0, 0, 0, 0}
#define Capacitor_init_default                   {0, 0, 0, 0, 0, 0, 0}
#define BJT_init_default                         {0, 0, 0, 0, 0, 0, 0}
#define LedStripData_init_zero                   {0, 0, 0, 0, false, RgbData_init_zero}
#define RgbData_init_zero                        {0, 0, 0}
#define Respond_init_zero                        {0}
#define Item_init_zero                           {0}
#define Resistor_init_zero                       {0, 0, 0, 0, 0, 0, 0}
#define Capacitor_init_zero                      {0, 0, 0, 0, 0, 0, 0}
#define BJT_init_zero                            {0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define BJT_partNumber_tag                       1
#define BJT_package_tag                          2
#define BJT_structure_tag                        3
#define BJT_vColEmiMax_tag                       4
#define BJT_colCurMax_tag                        5
#define BJT_power_tag                            6
#define BJT_amount_tag                           7
#define Capacitor_partNumber_tag                 1
#define Capacitor_package_tag                    2
#define Capacitor_capacitance_tag                3
#define Capacitor_tolerance_tag                  4
#define Capacitor_nullPlug_tag                   5
#define Capacitor_maxVoltage_tag                 6
#define Capacitor_amount_tag                     7
#define Item_type_tag                            1
#define Resistor_partNumber_tag                  1
#define Resistor_package_tag                     2
#define Resistor_resistance_tag                  3
#define Resistor_tolerance_tag                   4
#define Resistor_power_tag                       5
#define Resistor_maxVoltage_tag                  6
#define Resistor_amount_tag                      7
#define Respond_code_tag                         1
#define RgbData_red_tag                          1
#define RgbData_green_tag                        2
#define RgbData_blue_tag                         3
#define LedStripData_boardNumber_tag             1
#define LedStripData_stripNumber_tag             2
#define LedStripData_startLedNumber_tag          3
#define LedStripData_endLedNumber_tag            4
#define LedStripData_Colour_tag                  5

/* Struct field encoding specification for nanopb */
#define LedStripData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   boardNumber,       1) \
X(a, STATIC,   SINGULAR, UINT32,   stripNumber,       2) \
X(a, STATIC,   SINGULAR, UINT32,   startLedNumber,    3) \
X(a, STATIC,   SINGULAR, UINT32,   endLedNumber,      4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  Colour,            5)
#define LedStripData_CALLBACK NULL
#define LedStripData_DEFAULT NULL
#define LedStripData_Colour_MSGTYPE RgbData

#define RgbData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   red,               1) \
X(a, STATIC,   SINGULAR, UINT32,   green,             2) \
X(a, STATIC,   SINGULAR, UINT32,   blue,              3)
#define RgbData_CALLBACK NULL
#define RgbData_DEFAULT NULL

#define Respond_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   code,              1)
#define Respond_CALLBACK NULL
#define Respond_DEFAULT NULL

#define Item_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   type,              1)
#define Item_CALLBACK NULL
#define Item_DEFAULT NULL

#define Resistor_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   partNumber,        1) \
X(a, STATIC,   SINGULAR, UINT32,   package,           2) \
X(a, STATIC,   SINGULAR, UINT32,   resistance,        3) \
X(a, STATIC,   SINGULAR, UINT32,   tolerance,         4) \
X(a, STATIC,   SINGULAR, UINT32,   power,             5) \
X(a, STATIC,   SINGULAR, UINT32,   maxVoltage,        6) \
X(a, STATIC,   SINGULAR, UINT32,   amount,            7)
#define Resistor_CALLBACK NULL
#define Resistor_DEFAULT NULL

#define Capacitor_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   partNumber,        1) \
X(a, STATIC,   SINGULAR, UINT32,   package,           2) \
X(a, STATIC,   SINGULAR, UINT32,   capacitance,       3) \
X(a, STATIC,   SINGULAR, UINT32,   tolerance,         4) \
X(a, STATIC,   SINGULAR, UINT32,   nullPlug,          5) \
X(a, STATIC,   SINGULAR, UINT32,   maxVoltage,        6) \
X(a, STATIC,   SINGULAR, UINT32,   amount,            7)
#define Capacitor_CALLBACK NULL
#define Capacitor_DEFAULT NULL

#define BJT_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   partNumber,        1) \
X(a, STATIC,   SINGULAR, UINT32,   package,           2) \
X(a, STATIC,   SINGULAR, UINT32,   structure,         3) \
X(a, STATIC,   SINGULAR, UINT32,   vColEmiMax,        4) \
X(a, STATIC,   SINGULAR, UINT32,   colCurMax,         5) \
X(a, STATIC,   SINGULAR, UINT32,   power,             6) \
X(a, STATIC,   SINGULAR, UINT32,   amount,            7)
#define BJT_CALLBACK NULL
#define BJT_DEFAULT NULL

extern const pb_msgdesc_t LedStripData_msg;
extern const pb_msgdesc_t RgbData_msg;
extern const pb_msgdesc_t Respond_msg;
extern const pb_msgdesc_t Item_msg;
extern const pb_msgdesc_t Resistor_msg;
extern const pb_msgdesc_t Capacitor_msg;
extern const pb_msgdesc_t BJT_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define LedStripData_fields &LedStripData_msg
#define RgbData_fields &RgbData_msg
#define Respond_fields &Respond_msg
#define Item_fields &Item_msg
#define Resistor_fields &Resistor_msg
#define Capacitor_fields &Capacitor_msg
#define BJT_fields &BJT_msg

/* Maximum encoded size of messages (where known) */
#define BJT_size                                 42
#define Capacitor_size                           42
#define Item_size                                6
#define LedStripData_size                        44
#define Resistor_size                            42
#define Respond_size                             6
#define RgbData_size                             18

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
